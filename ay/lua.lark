chunk: block

block: stat* [retstat]

stat: ";"
    | varlist "=" explist
    | functioncall
    | label
    | BREAK
    | GOTO name
    | DO block END
    | WHILE exp DO block END
    | REPEAT block UNTIL exp
    | IF exp THEN block (ELSEIF exp THEN block)* [ELSE block] END
    | FOR name "=" exp "," exp ["," exp] DO block END
    | FOR namelist IN explist DO block END
    | FUNCTION funcname funcbody
    | LOCAL FUNCTION name funcbody
    | LOCAL attnamelist ["=" explist]

attnamelist: name attrib ("," name attrib)*
attrib: ["<" name ">"]

retstat: RETURN [explist] [";"]

label: "::" name "::"

funcname: name ("." name)* [":" name]

varlist: var ("," var)*
var: name | prefixexp "[" exp "]" | prefixexp "." name

namelist: name ("," name)*

explist: exp ("," exp)*
exp: NIL | FALSE | TRUE | numeral | literalstring | "..." | functiondef
   | prefixexp | tableconstructor | exp binop exp | unop exp
prefixexp: var | functioncall | "(" exp ")"

functioncall: prefixexp args | prefixexp ":" name args
args: "(" [explist] ")" | tableconstructor | literalstring

functiondef: FUNCTION funcbody
funcbody: "(" [parlist] ")" block END
parlist: namelist ["," "..."] | "..."

tableconstructor: "{" [fieldlist] "}"
fieldlist: field (fieldsep field)* [fieldsep]
field: "[" exp "]" "=" exp | name "=" exp | exp
fieldsep: "," | ";"

!binop: "+" | "-" | "*" | "/" | "//" | "^" | "%"
      | "&" | "~" | "|" | ">>" | "<<" | ".."
      | "<" | "<=" | ">" | ">=" | "==" | "~="
      | AND | OR

!unop: "-" | NOT | "#" | "~"


name: /(?!and$|break$|do$|else$|elseif$|end$|false$|for$|function$|goto$|if$|in$|local$|nil$|not$|or$|repeat$|return$|then$|true$|until$|while$)[a-zA-Z_][a-zA-Z_0-9]*/
literalstring: /"([^"\\]|\\.)*"|'([^'\\]|\\.)*'|(\[(=*)\[(.|\n)*?\]\4\])/
numeral: /0[xX](?:[\da-fA-F]+(?:\.[\da-fA-F]*)?|\.[\da-fA-F]+)(?:[pP][-+]?\d+)?|(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][-+]?\d+)?/


AND: "and"
BREAK: "break"
DO: "do"
ELSE: "else"
ELSEIF: "elseif"
END: "end"
FALSE: "false"
FOR: "for"
FUNCTION: "function"
GOTO: "goto"
IF: "if"
IN: "in"
LOCAL: "local"
NIL: "nil"
NOT: "not"
OR: "or"
REPEAT: "repeat"
RETURN: "return"
THEN: "then"
TRUE: "true"
UNTIL: "until"
WHILE: "while"

%import common.WS
%ignore WS
